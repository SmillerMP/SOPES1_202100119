services:
  # Servicios de LOCUST
  master:
    image: locustio/locust
    networks:
      - kuber-net
    ports:
      - "8089:8089"
    volumes:
      - ./Backend/Locust/locustfile.py:/mnt/locust/locustfile.py
    working_dir: /mnt/locust # El directorio de trabajo es /mnt/locust
    command: -f /mnt/locust/locustfile.py --users 10 --master -H http://api_rust:8000
    dns:
      - 8.8.8.8
      - 8.8.4.4
    

  worker:
    image: locustio/locust
    networks:
      - kuber-net
    volumes:
      - ./Backend/Locust/data:/mnt/locust/data
      - ./Backend/Locust/locustfile.py:/mnt/locust/locustfile.py
    working_dir: /mnt/locust
    command: -f /mnt/locust/locustfile.py --worker --master-host master
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # API_rust
  api_rust:
    build: ./Backend/Rust/API
    environment:
      - GOLANG_API_URL=http://api_golang:8010/weather
      - API_PORT=8000
    ports:
      - "8000:8000"
    networks:
      - kuber-net

  # API_golang
  api_golang:
    build: ./Backend/Golang/API_gRPC
    environment:
      - API_PORT=8010
      - GRPC_SERVER_KAFKA=gRPC_kafka:50051
      - GRPC_SERVER_RABBITMQ=gRPC_rabbitmq:50052
    # ports:
    #   - "8010:8010"
    networks:
      - kuber-net

  # server gRPC kafka
  # grpc_kafka:
  #   build: ./Backend/Golang/gRPC_Servers/Kafka
  #   environment:
  #     # - KAFKA_BROKER=kafka:9092
  #     # - KAFKA_TOPIC=messages
  #     - GRPC_PORT=50051
  #   # ports:
  #   #   - "50051:50051"
  #   networks:
  #     - kuber-net


  rabbitmq:
    image: rabbitmq:4.0-management
    ports:
      - "15672:15672" # Puerto para la interfaz de administraci칩n
      - "5672:5672" # Puerto para el protocolo AMQP
    networks:
      - kuber-net
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 15s
      retries: 3
      start_period: 30s

  # server gRPC rabbitmq
  grpc_rabbitmq:
    build: ./Backend/Golang/gRPC_Servers/RabbitMQ
    environment:
      # - RABBITMQ_HOST=rabbitmq
      # - RABBITMQ_QUEUE=messages
      - GRPC_PORT=50052
      - RABBITMQ_SERVER=rabbitmq:5672
    # ports:
    #   - "50052:50052"
    networks:
      - kuber-net
    depends_on:
      rabbitmq:
        condition: service_healthy

  costumer_rabbitmq:
    build: ./Backend/Golang/Costumers/RabbitMQ
    environment:
      - RABBITMQ_SERVER=rabbitmq:5672
      - NO_GOROUTINES=20
      - VALKEY_SERVER=valkey:6379
      # - RABBITMQ_QUEUE=messages
    networks:
      - kuber-net
    depends_on:
      rabbitmq:
        condition: service_healthy
    # valkey
  valkey:
    image: bitnami/valkey:8.0
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      # - VALKEY_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    networks:
      - kuber-net
    ports:
      - '6379:6379'

  
  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"  # Grafana en el puerto 3000
    networks:
      - kuber-net
    environment:
      - GF_SECURITY_ADMIN_USER=admin  # Usuario admin
      - GF_SECURITY_ADMIN_PASSWORD=sopes1  # Contrase침a
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - ./Frontend/Grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml  # Configuraci칩n de dashboards
      - ./Frontend/Grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml  # Nuevo archivo de configuraci칩n
      - ./Frontend/Grafana/dashboard.json:/var/lib/grafana/dashboards/dashboard.json  # Dashboard JSON
    

networks:
  kuber-net:
    driver: bridge
